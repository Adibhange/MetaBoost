// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  clerkUserId   String    @unique
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  subscription  Subscription?
  automations    Automation[]
  integrations  Integration[]
}

model Subscription {
  id            String    @id @default(cuid())
  plan          PLANS     @default(FREE)
  customerId    String?    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  User         User?      @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId        String    @unique  
}

model Automation {
  id            String    @id @default(cuid())
  name          String    @default("New Automation")
  active        Boolean   @default(false)
  trigger       Trigger[]
  listner       Listner?
  posts         Post[]
  dms           Dms[]
  keywords      Keyword[]
  createdAt     DateTime  @default(now())

  User          User?     @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId        String?    
}

model Integration {
  id            String          @id @default(cuid())
  name          INTEGRATIONS    @default(INSTAGRAM)
  token         String          @unique
  createdAt     DateTime        @default(now())
  expiresAt     DateTime?
  instagramId   String?         @unique

  User          User?           @relation(fields: [userId], references: [id] , onDelete: Cascade)
  userId        String?           

}

model Trigger {
  id            String    @id @default(cuid())
  type          String

  Automation    Automation? @relation(fields: [automationId], references: [id] , onDelete: Cascade)
  automationId  String?
}

model Listner {
  id            String      @id @default(cuid())
  listner       LISTNERS    @default(MESSAGE)
  prompt        String
  commentReply  String
  dmCount       Int         @default(0)
  commentCount  Int         @default(0)

  Automation    Automation  @relation(fields: [automationId], references: [id] , onDelete: Cascade)
  automationId  String      @unique    
}

model Post {
  id            String      @id @default(cuid())
  postId        String      
  caption       String?
  media         String
  mediaType     MEDIATYPE   @default(IMAGE)

  Automation    Automation? @relation(fields: [automationId], references: [id])
  automationId  String?

}

model Dms {
  id            String      @id @default(cuid())
  senderId      String?
  receiver      String?
  message       String?
  createdAt     DateTime    @default(now())

  Automation    Automation? @relation(fields: [automationId], references: [id])
  automationId  String?
}

model Keyword {
  id            String      @id @default(cuid())
  word          String

  Automation    Automation? @relation(fields: [automationId], references: [id])
  automationId  String?

  @@unique([word, automationId])
}

enum PLANS {
  FREE
  BASIC
  PRO
}

enum INTEGRATIONS {
  INSTAGRAM
  FACEBOOK
}

enum MEDIATYPE {
  IMAGE
  VIDEO
  CAROSEL_ALBUM
}

enum LISTNERS {
  AI
  MESSAGE
}